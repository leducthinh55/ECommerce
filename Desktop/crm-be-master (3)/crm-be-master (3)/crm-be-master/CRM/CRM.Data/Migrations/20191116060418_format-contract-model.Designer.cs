// <auto-generated />
using System;
using CRM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRM.Data.Migrations
{
    [DbContext(typeof(CRMContext))]
    [Migration("20191116060418_format-contract-model")]
    partial class formatcontractmodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CRM.Model.AttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("PredefinedId");

                    b.Property<Guid>("ProductAttributeId");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("PredefinedId");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("CRM.Model.BankAccount", b =>
                {
                    b.Property<string>("AccountNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankName");

                    b.Property<Guid>("CustomerId");

                    b.HasKey("AccountNumber");

                    b.HasIndex("CustomerId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("CRM.Model.CareHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Note");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CareHistories");
                });

            modelBuilder.Entity("CRM.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CRM.Model.ChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PropertyName");

                    b.Property<Guid>("TransactionLogId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TransactionLogId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("CRM.Model.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<Guid>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<string>("Functional");

                    b.Property<int?>("Gender");

                    b.Property<string>("Name");

                    b.Property<string>("Nation");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.Property<string>("Position");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("CRM.Model.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Building");

                    b.Property<string>("ContractNo");

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid?>("CustomerWorkflowId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Floor");

                    b.Property<double?>("LevelUpPrice");

                    b.Property<string>("Room");

                    b.Property<double?>("Square");

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("StartDateRent");

                    b.Property<DateTime?>("StartDateService");

                    b.Property<double?>("UnitPrice");

                    b.Property<double?>("UnitServicePrice");

                    b.Property<DateTime?>("UpPriceDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("CRM.Model.ContractAppendix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AreaRevolution");

                    b.Property<Guid>("ContractId");

                    b.Property<DateTime>("DateStart");

                    b.Property<bool>("IsIncrease");

                    b.Property<double>("PriceIncrease");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractAppendices");
                });

            modelBuilder.Entity("CRM.Model.ContractTelecom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContractNo");

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid?>("CustomerWorkflowId");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateSigned");

                    b.Property<DateTime>("DateStart");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.Property<string>("Position");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ContractTelecoms");
                });

            modelBuilder.Entity("CRM.Model.ContractTelecomAppendix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("ContractTelecomId");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateStart");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ContractTelecomId");

                    b.ToTable("ContractTelecomAppendices");
                });

            modelBuilder.Entity("CRM.Model.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Building");

                    b.Property<string>("BusinessLicense");

                    b.Property<DateTime?>("BusinessLicenseDate");

                    b.Property<string>("BusinessLicenseTime");

                    b.Property<string>("Career");

                    b.Property<string>("Code");

                    b.Property<string>("CompanyType");

                    b.Property<string>("ContractNo");

                    b.Property<DateTime?>("ContractNoDateOut");

                    b.Property<DateTime?>("ContractNoDateRegister");

                    b.Property<string>("Country");

                    b.Property<string>("CountryType");

                    b.Property<Guid>("CustomerTypeId");

                    b.Property<DateTime?>("DateEstablish")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2019, 11, 16, 13, 4, 18, 112, DateTimeKind.Local));

                    b.Property<int>("DeputyGender")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("DeputyMail");

                    b.Property<string>("DeputyName");

                    b.Property<string>("DeputyNation");

                    b.Property<string>("DeputyPosition");

                    b.Property<string>("DeputyTel");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("Floor");

                    b.Property<string>("IdentityCardId");

                    b.Property<decimal>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<string>("InvestmentCertificate");

                    b.Property<DateTime?>("InvestmentCertificateDate");

                    b.Property<string>("InvestmentCertificateTime");

                    b.Property<string>("MainCareer");

                    b.Property<string>("MarketType");

                    b.Property<string>("Name");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Note");

                    b.Property<string>("ObjectType");

                    b.Property<string>("ProductHighlight");

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("Room");

                    b.Property<string>("ShortName");

                    b.Property<int>("StaffCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("TaxCode");

                    b.Property<string>("Tel");

                    b.Property<decimal>("TotalInvestment")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<string>("TransactionName");

                    b.Property<string>("Website");

                    b.Property<string>("YearEnded");

                    b.Property<string>("YearStarted");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("IdentityCardId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CRM.Model.CustomerProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("PredefinedValue");

                    b.Property<Guid>("ReadPermission");

                    b.Property<string>("Type");

                    b.Property<Guid>("WritePermission");

                    b.HasKey("Id");

                    b.ToTable("CustomerProperties");
                });

            modelBuilder.Entity("CRM.Model.CustomerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("CRM.Model.CustomerValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid>("CustomerPropertyId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerPropertyId");

                    b.ToTable("CustomerValues");
                });

            modelBuilder.Entity("CRM.Model.CustomerWorkFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CustomerId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("StartDate");

                    b.Property<Guid>("WorkFlowId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("CustomerWorkFlows");
                });

            modelBuilder.Entity("CRM.Model.EventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionType");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExecutedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<Guid>("WorkFlowHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowHistoryId");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("CRM.Model.EventLogFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid>("EventLogId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("EventLogId");

                    b.ToTable("EventLogFiles");
                });

            modelBuilder.Entity("CRM.Model.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("Formulas");

                    b.Property<Guid?>("HsWorkflowId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Method");

                    b.Property<string>("Name");

                    b.Property<string>("NumbertoWordFields");

                    b.Property<Guid?>("PermissionIdR");

                    b.Property<Guid?>("PermissionIdW");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("CRM.Model.FormGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<Guid>("FormId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PermissionIdR");

                    b.Property<Guid?>("PermissionIdW");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormGroups");
                });

            modelBuilder.Entity("CRM.Model.GlobalVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<Guid>("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("GlobalVariables");
                });

            modelBuilder.Entity("CRM.Model.GlobalVariableValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerWorkflowId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid>("GlobalVariableId");

                    b.Property<bool>("IsObject");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CustomerWorkflowId");

                    b.ToTable("GlobalVariableValues");
                });

            modelBuilder.Entity("CRM.Model.HsGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("HsGroups");
                });

            modelBuilder.Entity("CRM.Model.HsGroupUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GroupId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("HsGroupUsers");
                });

            modelBuilder.Entity("CRM.Model.HsNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsSeen");

                    b.Property<string>("NData");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CRM.Model.HsPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("HsPermissions");
                });

            modelBuilder.Entity("CRM.Model.HsPermissionOfRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PermissionId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("HsPermissionOfRoles");
                });

            modelBuilder.Entity("CRM.Model.HsRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("HsRoles");
                });

            modelBuilder.Entity("CRM.Model.HsRoleOfGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("HsRoleOfGroups");
                });

            modelBuilder.Entity("CRM.Model.HsRoleOfUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("HsRoleOfUsers");
                });

            modelBuilder.Entity("CRM.Model.HsTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("FormId");

                    b.Property<Guid?>("InstanceId");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("HsTemplate");
                });

            modelBuilder.Entity("CRM.Model.HsUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool?>("IsEnabled");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Permissions");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CRM.Model.HsWorkFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PermissionIdR");

                    b.Property<Guid?>("PermissionIdW");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("HsWorkFlows");
                });

            modelBuilder.Entity("CRM.Model.HsWorkFlowConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Command");

                    b.Property<Guid>("FromInstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ToInstanceId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FromInstanceId");

                    b.HasIndex("ToInstanceId");

                    b.ToTable("HsWorkFlowConnections");
                });

            modelBuilder.Entity("CRM.Model.HsWorkFlowInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid?>("FormId");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PermissionId");

                    b.Property<Guid?>("PermissionIdNoti");

                    b.Property<Guid?>("PermissionIdR");

                    b.Property<Guid?>("PermissionIdW");

                    b.Property<string>("SubType");

                    b.Property<string>("Type");

                    b.Property<Guid>("WorkFlowId");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("HsWorkFlowInstances");
                });

            modelBuilder.Entity("CRM.Model.HubUserConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Connection");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HubUserConnections");
                });

            modelBuilder.Entity("CRM.Model.IdentityCard", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<string>("IssueAt");

                    b.Property<DateTime>("IssueDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("IdentityCard");
                });

            modelBuilder.Entity("CRM.Model.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Detail");

                    b.Property<string>("GroupName");

                    b.Property<string>("IconName");

                    b.Property<string>("IconType");

                    b.Property<string>("Label");

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("RouterLink");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("CRM.Model.PredefinedValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<Guid>("ProductAttributeId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("PredefinedValues");
                });

            modelBuilder.Entity("CRM.Model.PriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FromDate");

                    b.Property<double>("Price");

                    b.Property<Guid>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("CRM.Model.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CRM.Model.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("CRM.Model.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("CRM.Model.Telecomservice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Telecomservices");
                });

            modelBuilder.Entity("CRM.Model.TelecomserviceContractAppendix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContractAppendixId");

                    b.Property<string>("Data");

                    b.Property<int>("Status");

                    b.Property<Guid>("TelecomserviceId");

                    b.Property<decimal>("UnitAmount");

                    b.HasKey("Id");

                    b.HasIndex("ContractAppendixId");

                    b.HasIndex("TelecomserviceId");

                    b.ToTable("TelecomserviceContractAppendices");
                });

            modelBuilder.Entity("CRM.Model.TelecomserviceParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid>("TelecomServiceId");

                    b.HasKey("Id");

                    b.HasIndex("TelecomServiceId");

                    b.ToTable("TelecomserviceParameters");
                });

            modelBuilder.Entity("CRM.Model.TransactionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ByUser");

                    b.Property<DateTime>("DateChanged");

                    b.Property<Guid>("EntityId");

                    b.Property<string>("EntityName");

                    b.Property<string>("FunctionType");

                    b.HasKey("Id");

                    b.ToTable("TransactionLogs");
                });

            modelBuilder.Entity("CRM.Model.WorkFlowHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<Guid>("CustomerWorkFlowId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("FormData");

                    b.Property<Guid>("InstanceId");

                    b.Property<string>("InstanceName");

                    b.Property<Guid?>("PreviousStep");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerWorkFlowId");

                    b.ToTable("WorkFlowHistories");
                });

            modelBuilder.Entity("CRM.Model.WorkFlowHistoryFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsTemplate");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<Guid?>("WorkFlowHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowHistoryId");

                    b.ToTable("WorkFlowHistoryFiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CRM.Model.AttributeValue", b =>
                {
                    b.HasOne("CRM.Model.PredefinedValue", "Predefined")
                        .WithMany()
                        .HasForeignKey("PredefinedId");

                    b.HasOne("CRM.Model.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.Product", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.BankAccount", b =>
                {
                    b.HasOne("CRM.Model.Customer", "Customer")
                        .WithMany("BankAccount")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.CareHistory", b =>
                {
                    b.HasOne("CRM.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.ChangeLog", b =>
                {
                    b.HasOne("CRM.Model.TransactionLog", "TransactionLog")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("TransactionLogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.Contact", b =>
                {
                    b.HasOne("CRM.Model.Customer", "Customer")
                        .WithMany("Contact")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.Contract", b =>
                {
                    b.HasOne("CRM.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.ContractAppendix", b =>
                {
                    b.HasOne("CRM.Model.Contract", "Contract")
                        .WithMany("ContractAppendices")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.ContractTelecom", b =>
                {
                    b.HasOne("CRM.Model.Customer", "Customer")
                        .WithMany("ContractTelecoms")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.ContractTelecomAppendix", b =>
                {
                    b.HasOne("CRM.Model.ContractTelecom", "ContractTelecom")
                        .WithMany("ContractTelecomAppendices")
                        .HasForeignKey("ContractTelecomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.Customer", b =>
                {
                    b.HasOne("CRM.Model.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.IdentityCard", "IdentityCard")
                        .WithMany()
                        .HasForeignKey("IdentityCardId");
                });

            modelBuilder.Entity("CRM.Model.CustomerValue", b =>
                {
                    b.HasOne("CRM.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.CustomerProperty", "CustomerProperty")
                        .WithMany("CustomerValues")
                        .HasForeignKey("CustomerPropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.CustomerWorkFlow", b =>
                {
                    b.HasOne("CRM.Model.Customer", "Customer")
                        .WithMany("CustomerWorkFlows")
                        .HasForeignKey("CustomerId");

                    b.HasOne("CRM.Model.HsWorkFlow", "WorkFlow")
                        .WithMany()
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.EventLog", b =>
                {
                    b.HasOne("CRM.Model.WorkFlowHistory", "WorkFlowHistory")
                        .WithMany("EventLogs")
                        .HasForeignKey("WorkFlowHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.EventLogFile", b =>
                {
                    b.HasOne("CRM.Model.EventLog", "EventLog")
                        .WithMany("Files")
                        .HasForeignKey("EventLogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.FormGroup", b =>
                {
                    b.HasOne("CRM.Model.Form", "Form")
                        .WithMany("FormGroups")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.GlobalVariable", b =>
                {
                    b.HasOne("CRM.Model.HsWorkFlow", "WorkFlow")
                        .WithMany("GlobalVariables")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.GlobalVariableValue", b =>
                {
                    b.HasOne("CRM.Model.CustomerWorkFlow", "CustomerWorkFlow")
                        .WithMany("GlobalVariableValues")
                        .HasForeignKey("CustomerWorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.HsGroupUser", b =>
                {
                    b.HasOne("CRM.Model.HsGroup", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.HsUser", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CRM.Model.HsNotification", b =>
                {
                    b.HasOne("CRM.Model.HsUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CRM.Model.HsPermissionOfRole", b =>
                {
                    b.HasOne("CRM.Model.HsPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.HsRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.HsRoleOfGroup", b =>
                {
                    b.HasOne("CRM.Model.HsGroup", "Group")
                        .WithMany("Roles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.HsRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.HsRoleOfUser", b =>
                {
                    b.HasOne("CRM.Model.HsRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.HsUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CRM.Model.HsTemplate", b =>
                {
                    b.HasOne("CRM.Model.HsWorkFlowInstance", "WorkFlowInstance")
                        .WithMany("Templates")
                        .HasForeignKey("InstanceId");
                });

            modelBuilder.Entity("CRM.Model.HsWorkFlowConnection", b =>
                {
                    b.HasOne("CRM.Model.HsWorkFlowInstance", "FromInstance")
                        .WithMany("ToInstances")
                        .HasForeignKey("FromInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CRM.Model.HsWorkFlowInstance", "ToInstance")
                        .WithMany("FromInstances")
                        .HasForeignKey("ToInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CRM.Model.HsWorkFlowInstance", b =>
                {
                    b.HasOne("CRM.Model.HsWorkFlow", "WorkFlow")
                        .WithMany("Instances")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.HubUserConnection", b =>
                {
                    b.HasOne("CRM.Model.HsUser", "User")
                        .WithMany("HubUserConnections")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CRM.Model.IdentityCard", b =>
                {
                    b.HasOne("CRM.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.Menu", b =>
                {
                    b.HasOne("CRM.Model.Menu", "ParentMenu")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("CRM.Model.PredefinedValue", b =>
                {
                    b.HasOne("CRM.Model.ProductAttribute", "ProductAttribute")
                        .WithMany("PredefinedValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.PriceHistory", b =>
                {
                    b.HasOne("CRM.Model.Product", "Product")
                        .WithMany("PriceHistories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.ProductCategory", b =>
                {
                    b.HasOne("CRM.Model.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.TelecomserviceContractAppendix", b =>
                {
                    b.HasOne("CRM.Model.ContractTelecomAppendix", "ContractTelecomAppendix")
                        .WithMany("TelecomserviceContractAppendices")
                        .HasForeignKey("ContractAppendixId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.Telecomservice", "Telecomservice")
                        .WithMany("TelecomserviceContractAppendices")
                        .HasForeignKey("TelecomserviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.TelecomserviceParameter", b =>
                {
                    b.HasOne("CRM.Model.Telecomservice", "Telecomservice")
                        .WithMany("TelecomserviceParameters")
                        .HasForeignKey("TelecomServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.WorkFlowHistory", b =>
                {
                    b.HasOne("CRM.Model.CustomerWorkFlow", "CustomerWorkFlow")
                        .WithMany()
                        .HasForeignKey("CustomerWorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Model.WorkFlowHistoryFile", b =>
                {
                    b.HasOne("CRM.Model.WorkFlowHistory", "WorkFlowHistory")
                        .WithMany("Files")
                        .HasForeignKey("WorkFlowHistoryId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CRM.Model.HsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CRM.Model.HsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Model.HsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CRM.Model.HsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
